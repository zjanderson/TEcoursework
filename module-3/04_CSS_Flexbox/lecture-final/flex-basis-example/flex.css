.container-summary {
    text-align: center; 
    font-size: 2rem;
}

main, aside {
    display: flex;
    min-width: 500px; 
    max-width: 800px;
}

main {
    height: 100px;
    font-size: 40px;
    line-height: 40px;
    border: 1px solid orangered;
    align-items: center;

    margin-bottom: 70px; /* space between */
}

main > section {
    width: 1.5em; /* default each flex item to 1.5 * font as a starting point in order to accommodate up to 3 digits */
}

.box {
    display: flex;
    align-self: stretch;
    align-items: center;
    justify-content: center;
}

.box-left {
    background-color: cornflowerblue;
}

.box-right {
    background-color: greenyellow;
}

/* --------------------------- Example 1 ---------------------*/
/* No styles */


/* --------------------------- Example 2 ---------------------*/

.three {
    flex-grow: 1; /* start with however wide content is, then use 1/3 of remaining space */
                  /* 60 + (1/3 * (800 - (60 + 60))) */
                  /* 60 + (1/3 * 680) */
                  /* 287 */
}
.four {
    flex-grow: 2; /* start with however wide content is, then use 1/3 of remaining space */
                  /* 60px + (2/3 * (800 - (60 + 60))) */
                  /* 60 + (2/3 * 680) */
                  /* 513 */
}

/* --------------------------- Example 3 ---------------------*/

.five {
    flex-basis: 200px;
    flex-grow: 1; /* start with 200px wide, then use 1/3 of remaining space */
                  /* resulting width: 200 + (1/3 * (800 - (100 + 200)) */
                  /* resulting width: 200 + (1/3 * (800 - 300)) */
                  /* resulting width: 200 + (1/3 * 500) */
                  /* resulting width: 200 + 166.67 */
                  /* resulting width: 366.67 */
}
.six {
    flex-basis: 100px;
    flex-grow: 2; /* start at 100px wide, then use 2/3 of remaining space */
                  /* resulting width: 100 + (2/3 * (800 - (100 + 200)) */
                  /* resulting width: 100 + (2/3 * (800 - 300)) */
                  /* resulting width: 100 + (2/3 * 500) */
                  /* resulting width: 100 + 333.33 */
                  /* resulting width: 433.33 */
}


/* --------------------------- Example 4 ---------------------*/
.seven {
    flex-basis: 300px;
    flex-shrink: 1; /* start with 300px wide, 
                        and shrink half as much as #eight as the container shrinks
                        
                        Starting width of both items is 600px.
                        The container is 500px minimum, leaving 100px of room to shrink.

                        The minimum this will shrink to can be calculated using
                        
                        width - (shrink rate * shrink space)
                        
                        shrink rate = (300 * 1) / ((300 * 1) + (300 * 2)) = 1/3
                        
                        300 - (1/3 * 100) => 267.67
                        */
                        
    flex-grow: 1; /* we can use both shrink and grow. 
                     This one will take up all of the remaining space. 
                     800px is the max. We begin at 600px.
                     This leaves 200px remaining.

                     300px + 200px remaining => 500px total */
}

.eight {
    flex-basis: 300px;
    flex-shrink: 2; /* start with 300px wide, 
                    and shrink twice as much as #seven when the container shrinks
                    
                    Starting width of both items is 600px.
                    The container is 500px minimum, leaving 100px of room to shrink.

                    The minimum this will shrink to can be calculated using

                    width - (shrink rate * shrink space)
                        
                    shrink rate = (300 * 2) / ((300 * 1) + (300 * 2)) = 2/3
                    
                    300 - (2/3 * 100) => 233.33
                    */
}
